module PRNG (
  input logic A,
  input logic clk,
//input logic clkk1,clkk2,
    output logic [11:0] y
);

  logic [15:0] clk1;
  logic [9:0] clk2;
  logic [11:0] a, b, y1, x;
  logic counter1,counter2;
  assign x=8'b10101000;

  always_ff @(posedge clk) begin
    clk1 <= clk1 + 1;
    if (clk1[15] == 1) clk1 <= 0;
  end

  always_ff @(posedge clk) begin
    clk2 <= clk2 + 1;
    if (clk2[9] == 1) clk2 <= 0;
  end

  /*
always_ff @(posedge clk1) begin
    if (counter1 < 10)
      counter1 <= counter1 + 1;
    else
      counter1 <= 0;
  end

  always_ff @(posedge clk2) begin
    if (counter2 < 10)
      counter2 <= counter2 + 1;
    else
      counter2 <= 0;
  end
*/

/*
  always_ff @(posedge clk1) begin
    if (counter1 < 10)
      counter1 <= counter1 + 1;
    else
      counter1 <= 0;
  end

  always_ff @(posedge clk2) begin
    if (counter2 < 10)
      counter2 <= counter2 + 1;
    else
      counter2 <= 0;
  end
*/

  always_ff @(posedge A) begin
    a <= counter1;
    b <= counter2;
    y <= (a * x + b)%4096;
  end
endmodule


***uncomment the code block with clkk1 and clkk2 for behavioural simulation, and uncomment the code block with clk1 and clk2 for FPGA implementation'
